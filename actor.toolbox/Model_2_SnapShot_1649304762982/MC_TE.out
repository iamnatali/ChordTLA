@!@!@STARTMSG 2262:0 @!@!@
TLC2 Version 2.16 of 31 December 2020 (rev: cdddf55)
@!@!@ENDMSG 2262 @!@!@
@!@!@STARTMSG 2271:0 @!@!@
Running depth-first search Model-Checking with fp 19 and seed 4488835608485957224 with 4 workers on 8 cores with 448MB heap and 1004MB offheap memory [pid: 2800] (Windows 10 10.0 amd64, AdoptOpenJDK 14.0.1 x86_64).
@!@!@ENDMSG 2271 @!@!@
@!@!@STARTMSG 2220:0 @!@!@
Starting SANY...
@!@!@ENDMSG 2220 @!@!@
Parsing file D:\TLA\actor\actor.toolbox\Model_2\MC.tla
Parsing file D:\TLA\actor\actor.toolbox\Model_2\actor.tla
Parsing file D:\TLA\TLAToolbox-1.7.1-win32.win32.x86_64\toolbox\plugins\org.lamport.tlatools_1.0.0.202012311918\tla2sany\StandardModules\TLC.tla
Parsing file D:\TLA\TLAToolbox-1.7.1-win32.win32.x86_64\toolbox\plugins\org.lamport.tlatools_1.0.0.202012311918\tla2sany\StandardModules\Integers.tla
Parsing file D:\TLA\TLAToolbox-1.7.1-win32.win32.x86_64\toolbox\plugins\org.lamport.tlatools_1.0.0.202012311918\tla2sany\StandardModules\Sequences.tla
Parsing file D:\TLA\TLAToolbox-1.7.1-win32.win32.x86_64\toolbox\plugins\org.lamport.tlatools_1.0.0.202012311918\tla2sany\StandardModules\Naturals.tla
Parsing file D:\TLA\TLAToolbox-1.7.1-win32.win32.x86_64\toolbox\plugins\org.lamport.tlatools_1.0.0.202012311918\tla2sany\StandardModules\FiniteSets.tla
Semantic processing of module Naturals
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module TLC
Semantic processing of module Integers
Semantic processing of module actor
Semantic processing of module MC
@!@!@STARTMSG 2219:0 @!@!@
SANY finished.
@!@!@ENDMSG 2219 @!@!@
@!@!@STARTMSG 2185:0 @!@!@
Starting... (2022-04-07 09:12:25)
@!@!@ENDMSG 2185 @!@!@
@!@!@STARTMSG 2284:3 @!@!@
Declaring state or action constraints during liveness checking is dangerous: Please read section 14.3.5 on page 247 of Specifying Systems (https://lamport.azurewebsites.net/tla/book.html) and optionally the discussion at https://discuss.tlapl.us/msg00994.html for more details.
@!@!@ENDMSG 2284 @!@!@
@!@!@STARTMSG 1001:1 @!@!@
Java ran out of memory.  Running Java with a larger memory allocation
pool (heap) may fix this.  But it won't help if some state has an enormous
number of successor states, or if TLC must compute the value of a huge set.
@!@!@ENDMSG 1001 @!@!@
@!@!@STARTMSG 2186:0 @!@!@
Finished in 17246ms at (2022-04-07 09:12:42)
@!@!@ENDMSG 2186 @!@!@
